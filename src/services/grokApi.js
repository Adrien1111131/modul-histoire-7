const GROK_API_KEY = import.meta.env.VITE_GROK_API_KEY
const API_URL = 'https://api.x.ai/v1/chat/completions'

import predicats from '../data/predicats'
import * as promptTemplates from './promptTemplates'
import * as introTemplates from './introductionTemplates'
import * as optimizedPrompts from './optimizedPrompts'

const N8N_WEBHOOK_URL = 'https://adrien31.app.n8n.cloud/webhook/c6101c94-785c-4eb3-a7e3-f01568125047';

/**
 * D√©tecte si l'erreur est li√©e au quota/rate limit
 * @param {Error} error - Erreur √† analyser
 * @returns {boolean} True si c'est une erreur de quota
 */
const isQuotaError = (error) => {
  const errorMessage = error.message.toLowerCase();
  return (
    error.message.includes('429') ||
    errorMessage.includes('too many tokens') ||
    errorMessage.includes('rate limit') ||
    errorMessage.includes('quota') ||
    errorMessage.includes('exhausted')
  );
};

/**
 * Effectue un appel API avec fallback automatique Grok-4 ‚Üí Grok-3
 * @param {Array} messages - Messages pour l'API
 * @param {number} temperature - Temp√©rature pour la g√©n√©ration
 * @param {number} seed - Seed pour la reproductibilit√©
 * @param {string} functionName - Nom de la fonction appelante (pour logs)
 * @returns {Promise<Object>} R√©ponse de l'API
 */
const makeAPICallWithFallback = async (messages, temperature, seed, functionName) => {
  // Tentative 1 : Grok-4 (premium)
  try {
    console.log(`[${functionName}] Tentative avec Grok-4-0709`);
    
    const response = await fetch(API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${GROK_API_KEY}`
      },
      body: JSON.stringify({
        messages,
        model: "grok-4-0709",
        stream: false,
        temperature,
        seed
      })
    });

    if (!response.ok) {
      const errorData = await response.text();
      const error = new Error(`Erreur API ${response.status}: ${response.statusText} - ${errorData}`);
      
      // Si c'est une erreur de quota, on va essayer le fallback
      if (response.status === 429 || isQuotaError(error)) {
        console.warn(`[${functionName}] Quota Grok-4 atteint, fallback vers Grok-3...`);
        throw error; // On lance l'erreur pour d√©clencher le fallback
      }
      
      // Pour les autres erreurs, on les log et on les relance
      console.error(`[${functionName}] Erreur API d√©taill√©e:`, {
        status: response.status,
        statusText: response.statusText,
        body: errorData
      });
      throw error;
    }

    const data = await response.json();
    console.log(`[${functionName}] ‚úÖ Succ√®s avec Grok-4-0709`);
    return data;

  } catch (error) {
    // Si c'est une erreur de quota, on tente le fallback
    if (isQuotaError(error)) {
      console.log(`[${functionName}] üîÑ Fallback vers Grok-3 (grok-beta)`);
      
      try {
        const fallbackResponse = await fetch(API_URL, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${GROK_API_KEY}`
          },
          body: JSON.stringify({
            messages,
            model: "grok-beta", // Grok-3 fallback
            stream: false,
            temperature: temperature * 0.9, // L√©g√®rement plus conservateur
            seed
          })
        });

        if (!fallbackResponse.ok) {
          const fallbackErrorData = await fallbackResponse.text();
          console.error(`[${functionName}] Erreur fallback Grok-3:`, {
            status: fallbackResponse.status,
            statusText: fallbackResponse.statusText,
            body: fallbackErrorData
          });
          throw new Error(`Erreur fallback API ${fallbackResponse.status}: ${fallbackResponse.statusText} - ${fallbackErrorData}`);
        }

        const fallbackData = await fallbackResponse.json();
        console.log(`[${functionName}] ‚úÖ Succ√®s avec fallback Grok-3 (grok-beta)`);
        return fallbackData;

      } catch (fallbackError) {
        console.error(`[${functionName}] ‚ùå √âchec du fallback Grok-3:`, fallbackError);
        throw new Error(`√âchec complet: Grok-4 (quota) et Grok-3 (${fallbackError.message})`);
      }
    }
    
    // Pour les autres erreurs, on les relance directement
    throw error;
  }
};

/**
 * Envoie l'histoire g√©n√©r√©e au webhook n8n
 * @param {string} storyText - Texte de l'histoire
 */
const sendStoryToN8n = async (storyText) => {
  try {
    await fetch(N8N_WEBHOOK_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ story: storyText }),
    });
  } catch (error) {
    console.error('Erreur lors de l\'envoi au webhook n8n:', error);
  }
};

/**
 * Nettoie le contenu de l'histoire en supprimant les annotations et analyses
 * @param {string} content - Contenu brut de l'histoire
 * @returns {string} Contenu nettoy√©
 */
const cleanStoryContent = (content) => {
  let cleanedContent = content;
  
  // Supprimer les annotations et analyses
  cleanedContent = cleanedContent.replace(/\*\*.*?\*\*/g, ''); // Supprime les marqueurs **texte**
  cleanedContent = cleanedContent.replace(/###.*?\n/g, ''); // Supprime les titres ### titre
  cleanedContent = cleanedContent.replace(/---\n/g, ''); // Supprime les s√©parateurs ---
  cleanedContent = cleanedContent.replace(/\n\n\n###.*$/s, ''); // Supprime tout ce qui suit un triple saut de ligne suivi de ###
  
  return cleanedContent;
};

/**
 * G√©n√®re une histoire bas√©e sur le profil utilisateur (VERSION OPTIMIS√âE)
 * @param {Object} userProfile - Profil de l'utilisateur
 * @returns {Promise<string>} Histoire g√©n√©r√©e
 */
export const generateStory = async (userProfile) => {
  try {
    const { personalInfo, sensoryAnswers, excitationAnswers } = userProfile
    
    // D√©terminer le style narratif bas√© sur les r√©ponses sensorielles
    const dominantStyle = calculateDominantStyle(sensoryAnswers)
    const excitationType = calculateExcitationType(excitationAnswers)

    // Cr√©er un profil utilisateur enrichi pour le syst√®me optimis√©
    const enrichedProfile = {
      name: personalInfo.name,
      gender: personalInfo.gender,
      orientation: personalInfo.orientation,
      dominantStyle: dominantStyle,
      excitationType: excitationType
    };
    
    // D√©terminer le niveau d'√©rotisme bas√© sur le ton choisi
    const eroticismLevel = personalInfo.tone === 'doux' ? 1 : 
                          personalInfo.tone === 'passionne' ? 3 : 2;
    
    // Construire le prompt syst√®me optimis√©
    const systemPrompt = optimizedPrompts.buildOptimizedPrompt(enrichedProfile, 'guided', eroticismLevel);
    
    // Construire le prompt utilisateur optimis√© avec les param√®tres sp√©cifiques
    let userPrompt = optimizedPrompts.buildUserPrompt({
      name: personalInfo.name,
      gender: personalInfo.gender,
      orientation: personalInfo.orientation,
      readingTime: getLengthInMinutes(personalInfo.length)
    });
    
    // Ajouter les param√®tres sp√©cifiques du profil guid√©
    userPrompt += `\n\nPARAM√àTRES SP√âCIFIQUES DU PROFIL :
- Tonalit√© : ${personalInfo.tone} (${getToneDescription(personalInfo.tone)})
- Contexte initial : ${personalInfo.context} (${getContextDescription(personalInfo.context)})
- Longueur souhait√©e : ${personalInfo.length} (${getLengthDescription(personalInfo.length)})
- Style dominant : ${dominantStyle}
- Type d'excitation : ${excitationType}

PROGRESSION ADAPT√âE :
1. Ton doux pour poser le contexte initial (${personalInfo.context})
2. Alterner ton sensuel et murmures pour la mont√©e du d√©sir
3. Utiliser ton intense et excit√© pour les moments passionn√©s
4. Ton de jouissance pour les moments culminants
5. Terminer par ton doux pour la descente √©motionnelle`;

    const messages = [
      { role: "system", content: systemPrompt },
      { role: "user", content: userPrompt }
    ];

    // Ajouter des √©l√©ments al√©atoires pour √©viter la r√©p√©tition
    const randomSeed = Math.floor(Math.random() * 10000);
    const randomTemperature = 0.7 + (Math.random() * 0.2); // Entre 0.7 et 0.9

    // Utiliser le syst√®me de fallback automatique Grok-4 ‚Üí Grok-3
    const data = await makeAPICallWithFallback(messages, randomTemperature, randomSeed, 'generateStory');
    const content = cleanStoryContent(data.choices[0].message.content);
    
    // Envoi automatique √† n8n
    sendStoryToN8n(content);

    return content;
  } catch (error) {
    console.error('Erreur API:', error);
    throw error;
  }
};

/**
 * G√©n√®re une histoire al√©atoire bas√©e sur les pr√©f√©rences de l'utilisateur (VERSION OPTIMIS√âE)
 * @param {Object} randomStoryData - Donn√©es pour l'histoire al√©atoire
 * @returns {Promise<string>} Histoire g√©n√©r√©e
 */
export const generateRandomStory = async (randomStoryData) => {
  try {
    const { personalInfo, selectedKinks, readingTime = 2, eroticismLevel = 2, dominantStyle, excitationType } = randomStoryData;
    
    // Cr√©er un profil utilisateur enrichi pour le syst√®me optimis√©
    const userProfile = {
      name: personalInfo.name,
      gender: personalInfo.gender,
      orientation: personalInfo.orientation,
      dominantStyle: dominantStyle || 'VISUEL',
      excitationType: excitationType || '√âMOTIONNEL'
    };
    
    // Construire le prompt syst√®me optimis√©
    const systemPrompt = optimizedPrompts.buildOptimizedPrompt(userProfile, 'random', eroticismLevel);
    
    // Construire le prompt utilisateur optimis√©
    const userPrompt = optimizedPrompts.buildUserPrompt({
      name: personalInfo.name,
      gender: personalInfo.gender,
      orientation: personalInfo.orientation,
      selectedKinks: selectedKinks,
      readingTime: readingTime
    });

    const messages = [
      { role: "system", content: systemPrompt },
      { role: "user", content: userPrompt }
    ];

    // Ajouter des √©l√©ments al√©atoires pour √©viter la r√©p√©tition
    const randomSeed = Math.floor(Math.random() * 10000);
    const randomTemperature = 0.7 + (Math.random() * 0.3); // Entre 0.7 et 1.0

    // Utiliser le syst√®me de fallback automatique Grok-4 ‚Üí Grok-3
    const data = await makeAPICallWithFallback(messages, randomTemperature, randomSeed, 'generateRandomStory');
    const content = cleanStoryContent(data.choices[0].message.content);
    
    // Envoi automatique √† n8n
    sendStoryToN8n(content);

    return content;
  } catch (error) {
    console.error('Erreur API:', error);
    throw error;
  }
};

/**
 * G√©n√®re une histoire personnalis√©e bas√©e sur les choix de l'utilisateur (VERSION OPTIMIS√âE)
 * @param {Object} customChoices - Choix personnalis√©s
 * @param {Object} existingProfile - Profil existant (optionnel)
 * @returns {Promise<string>} Histoire g√©n√©r√©e
 */
export const generateCustomStory = async (customChoices, existingProfile = null) => {
  try {
    const { situation, personnage, lieu, readingTime = 2, eroticismLevel = 2 } = customChoices;
    
    // Cr√©er un profil utilisateur enrichi pour le syst√®me optimis√©
    const userProfile = existingProfile ? {
      name: existingProfile.name,
      gender: existingProfile.gender,
      orientation: existingProfile.orientation,
      dominantStyle: existingProfile.dominantStyle || 'VISUEL',
      excitationType: existingProfile.excitationType || '√âMOTIONNEL'
    } : {
      dominantStyle: 'VISUEL',
      excitationType: '√âMOTIONNEL'
    };
    
    // Construire le prompt syst√®me optimis√©
    const systemPrompt = optimizedPrompts.buildOptimizedPrompt(userProfile, 'custom', eroticismLevel);
    
    // Construire le prompt utilisateur optimis√©
    const userPrompt = optimizedPrompts.buildUserPrompt({
      name: existingProfile?.name || 'l\'auditrice',
      gender: existingProfile?.gender || 'femme',
      orientation: existingProfile?.orientation || 'h√©t√©rosexuelle',
      readingTime: readingTime,
      situation: situation.label,
      personnage: personnage.label,
      lieu: lieu.label
    });

    const messages = [
      { role: "system", content: systemPrompt },
      { role: "user", content: userPrompt }
    ];

    // Ajouter des √©l√©ments al√©atoires pour √©viter la r√©p√©tition
    const randomSeed = Math.floor(Math.random() * 10000);
    const randomTemperature = 0.7 + (Math.random() * 0.3); // Entre 0.7 et 1.0

    // Utiliser le syst√®me de fallback automatique Grok-4 ‚Üí Grok-3
    const data = await makeAPICallWithFallback(messages, randomTemperature, randomSeed, 'generateCustomStory');
    const content = cleanStoryContent(data.choices[0].message.content);
    
    // Envoi automatique √† n8n
    sendStoryToN8n(content);

    return content;
  } catch (error) {
    console.error('Erreur API:', error);
    throw error;
  }
};

/**
 * G√©n√®re une histoire bas√©e sur un fantasme libre (VERSION OPTIMIS√âE)
 * @param {string} fantasyText - Texte du fantasme
 * @param {Object} existingProfile - Profil existant (optionnel)
 * @param {number} readingTime - Temps de lecture souhait√©
 * @param {number} eroticismLevel - Niveau d'√©rotisme
 * @returns {Promise<string>} Histoire g√©n√©r√©e
 */
export const generateFreeFantasyStory = async (fantasyText, existingProfile = null, readingTime = 2, eroticismLevel = 2) => {
  try {
    // Cr√©er un profil utilisateur enrichi pour le syst√®me optimis√©
    const userProfile = existingProfile ? {
      name: existingProfile.name,
      gender: existingProfile.gender,
      orientation: existingProfile.orientation,
      dominantStyle: existingProfile.dominantStyle || 'VISUEL',
      excitationType: existingProfile.excitationType || '√âMOTIONNEL'
    } : {
      dominantStyle: 'VISUEL',
      excitationType: '√âMOTIONNEL'
    };
    
    // Construire le prompt syst√®me optimis√©
    const systemPrompt = optimizedPrompts.buildOptimizedPrompt(userProfile, 'free', eroticismLevel);
    
    // Construire le prompt utilisateur optimis√©
    const userPrompt = optimizedPrompts.buildUserPrompt({
      name: existingProfile?.name || 'l\'auditrice',
      gender: existingProfile?.gender || 'femme',
      orientation: existingProfile?.orientation || 'h√©t√©rosexuelle',
      readingTime: readingTime,
      fantasyText: fantasyText
    });

    const messages = [
      { role: "system", content: systemPrompt },
      { role: "user", content: userPrompt }
    ];

    // Ajouter des √©l√©ments al√©atoires pour √©viter la r√©p√©tition
    const randomSeed = Math.floor(Math.random() * 10000);
    const randomTemperature = 0.7 + (Math.random() * 0.3); // Entre 0.7 et 1.0

    // Utiliser le syst√®me de fallback automatique Grok-4 ‚Üí Grok-3
    const data = await makeAPICallWithFallback(messages, randomTemperature, randomSeed, 'generateFreeFantasyStory');
    const content = cleanStoryContent(data.choices[0].message.content);
    
    // Envoi automatique √† n8n
    sendStoryToN8n(content);

    return content;
  } catch (error) {
    console.error('Erreur API:', error);
    throw error;
  }
};

/**
 * Calcule le style dominant bas√© sur les r√©ponses sensorielles
 * @param {Object} answers - R√©ponses aux questions sensorielles
 * @returns {string} Style dominant
 */
const calculateDominantStyle = (answers = {}) => {
  try {
    // Convertir l'objet de r√©ponses en tableau de valeurs
    const answersArray = Object.values(answers)
    
    if (!answersArray.length) {
      console.warn('Aucune r√©ponse sensorielle trouv√©e')
      return 'VISUEL'
    }

    // Compter les r√©ponses pour chaque style
    const counts = answersArray.reduce((acc, answer) => {
      acc[answer] = (acc[answer] || 0) + 1
      return acc
    }, {})

    // Trouver le style dominant
    const dominant = Object.entries(counts)
      .sort(([,a], [,b]) => b - a)[0][0]

    // Mapper les lettres aux styles
    const styleMap = {
      'A': 'VISUEL',
      'B': 'SENSORIEL',
      'C': 'AUDITIF'
    }

    return styleMap[dominant] || 'VISUEL'
  } catch (error) {
    console.error('Erreur lors du calcul du style dominant:', error)
    return 'VISUEL'
  }
}

/**
 * Calcule le type d'excitation bas√© sur les r√©ponses
 * @param {Object} answers - R√©ponses aux questions d'excitation
 * @returns {string} Type d'excitation
 */
const calculateExcitationType = (answers = {}) => {
  try {
    // Convertir l'objet de r√©ponses en tableau de valeurs
    const answersArray = Object.values(answers)
    
    if (!answersArray.length) {
      console.warn('Aucune r√©ponse d\'excitation trouv√©e')
      return '√âMOTIONNEL'
    }

    const typeMap = {
      'A': '√âMOTIONNEL',
      'B': 'IMAGINATIF',
      'C': 'DOMINANCE_DOUCE',
      'D': 'SENSORIEL'
    }

    // Compter les r√©ponses pour chaque type
    const counts = answersArray.reduce((acc, answer) => {
      acc[answer] = (acc[answer] || 0) + 1
      return acc
    }, {})

    // Trouver le type dominant
    const dominant = Object.entries(counts)
      .sort(([,a], [,b]) => b - a)[0][0]

    return typeMap[dominant] || '√âMOTIONNEL'
  } catch (error) {
    console.error('Erreur lors du calcul du type d\'excitation:', error)
    return '√âMOTIONNEL'
  }
}

/**
 * Obtient la description du ton
 * @param {string} tone - Ton choisi
 * @returns {string} Description du ton
 */
const getToneDescription = (tone) => {
  const descriptions = {
    'doux': 'utilise un ton tendre, affectueux et rassurant',
    'passionne': 'sois intense, ardent et fougueux',
    'mysterieux': 'cr√©e une ambiance √©nigmatique et s√©duisante',
    'dominant': 'adopte une posture assur√©e et dominante mais bienveillante'
  }
  return descriptions[tone] || descriptions['doux']
}

/**
 * Obtient la description du contexte
 * @param {string} context - Contexte choisi
 * @returns {string} Description du contexte
 */
const getContextDescription = (context) => {
  const descriptions = {
    'rencontre': 'une rencontre inattendue qui m√®ne √† une connexion imm√©diate',
    'retrouvailles': 'des retrouvailles passionn√©es apr√®s une s√©paration',
    'fantasme': 'la r√©alisation d\'un fantasme longtemps imagin√©',
    'quotidien': 'un moment ordinaire qui devient extraordinaire'
  }
  return descriptions[context] || descriptions['rencontre']
}

/**
 * Obtient la description de la longueur
 * @param {string} length - Longueur choisie
 * @returns {string} Description de la longueur
 */
const getLengthDescription = (length) => {
  const descriptions = {
    'short': 'histoire courte et intense (2 minutes de lecture)',
    'medium': 'histoire de longueur moyenne avec d√©veloppement (3 minutes)',
    'long': 'histoire d√©taill√©e et immersive (5 minutes)'
  }
  return descriptions[length] || descriptions['medium']
}

/**
 * Convertit la longueur en minutes
 * @param {string} length - Longueur choisie
 * @returns {number} Temps en minutes
 */
const getLengthInMinutes = (length) => {
  const minutes = {
    'short': 2,
    'medium': 3,
    'long': 5
  }
  return minutes[length] || 5
}

export default {
  generateStory,
  generateRandomStory,
  generateCustomStory,
  generateFreeFantasyStory
}
